// server.js
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const REQUIRED_ENV = ['TELEGRAM_BOT_TOKEN', 'WEB_APP_URL'];
const missingEnv = REQUIRED_ENV.filter(key => !process.env[key]);
if (missingEnv.length) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', missingEnv.join(', '));
  process.exit(1);
}

const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(token, {
  polling: {
    params: {
      timeout: 10 // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ polling.timeout
    }
  },
  autoCancel: true // –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–æ–π –ø—Ä–æ–º–∏—Å–æ–≤
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ deep-—Å—Å—ã–ª–∫–∏
bot.onText(/\/start app=(\w+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const appName = match[1]; // –ù–∞–ø—Ä–∏–º–µ—Ä: "shop"

  if (appName === "shop") {
    await bot.sendMessage(chatId, "–û—Ç–∫—Ä—ã–≤–∞—é –º–∞–≥–∞–∑–∏–Ω...", {
      reply_markup: {
        inline_keyboard: [[{
          text: "üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω",
          web_app: { url: process.env.WEB_APP_URL }
        }]]
      }
    });
  }
});
const publishToChannel = async () => {
  try {
    // –£–∫–∞–∂–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä: "@a_device_channel" –∏–ª–∏ "-1001234567890")
    const CHANNEL_ID = '@ADeviceopt'; 

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    const chat = await bot.getChat(CHANNEL_ID);
    console.log(`üîé –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: ${chat.title}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.sendMessage(CHANNEL_ID, 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!', {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
              web_app: { 
                url: process.env.WEB_APP_URL 
              }
            }
          ]
        ]
      }
    });

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack
    });
  }
};
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Express
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());
// ... –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ express)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const user = msg.from;
  
  const keyboard = {
    reply_markup: {
      inline_keyboard: [[{
        text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
        web_app: { url: process.env.WEB_APP_URL }
      }]]
    }
  };

  const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ A-Device - –º–∞–≥–∞–∑–∏–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:
  `.trim();

  bot.sendMessage(chatId, welcomeMessage, keyboard)
    .catch(error => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error));
});
// server.js
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.WEB_APP_URL) {
  console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª! –¢—Ä–µ–±—É—é—Ç—Å—è TELEGRAM_BOT_TOKEN –∏ WEB_APP_URL');
  process.exit(1);
}
// –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –¥–ª—è Glitch
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    uptime: process.uptime(),
    webApp: process.env.WEB_APP_URL,
    node: process.version
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason) => {
  console.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ:', reason);
});

bot.on('polling_error', (error) => {
  console.error('üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞:', error.message);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`
  üöÄ A-Device Bot –∑–∞–ø—É—â–µ–Ω
  ==========================
  –í–µ—Ä—Å–∏—è: 2.1.0
  –ü–æ—Ä—Ç: ${PORT}
  WebApp: ${process.env.WEB_APP_URL}
  Node.js: ${process.version}
  ==========================
  `);
});